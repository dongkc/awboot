diff -urN linux-6.12-rc6/drivers/remoteproc/Kconfig linux-6.12-rc6-wip/drivers/remoteproc/Kconfig
--- linux-6.12-rc6/drivers/remoteproc/Kconfig	2024-10-27 23:52:02.000000000 +0100
+++ linux-6.12-rc6-wip/drivers/remoteproc/Kconfig	2024-10-30 11:38:30.000000000 +0100
@@ -327,6 +327,13 @@
 
 	  This can be either built-in or a loadable module.
 
+config SUN8I_REMOTEPROC
+	tristate "Allwinner sun8i-v853 remoteproc support"
+	depends on ARCH_SUNXI || COMPILE_TEST
+	help
+	  Say y here to support the RISC_V mcu in V853/V851s/V851SE SoCs
+	  via the remote processor framework.
+
 config TI_K3_DSP_REMOTEPROC
 	tristate "TI K3 DSP remoteproc support"
 	depends on ARCH_K3
diff -urN linux-6.12-rc6/drivers/remoteproc/Makefile linux-6.12-rc6-wip/drivers/remoteproc/Makefile
--- linux-6.12-rc6/drivers/remoteproc/Makefile	2024-10-27 23:52:02.000000000 +0100
+++ linux-6.12-rc6-wip/drivers/remoteproc/Makefile	2024-10-30 11:38:30.000000000 +0100
@@ -36,6 +36,7 @@
 obj-$(CONFIG_ST_REMOTEPROC)		+= st_remoteproc.o
 obj-$(CONFIG_ST_SLIM_REMOTEPROC)	+= st_slim_rproc.o
 obj-$(CONFIG_STM32_RPROC)		+= stm32_rproc.o
+obj-$(CONFIG_SUN8I_REMOTEPROC)		+= sun8i_rproc.o
 obj-$(CONFIG_TI_K3_DSP_REMOTEPROC)	+= ti_k3_dsp_remoteproc.o
 obj-$(CONFIG_TI_K3_M4_REMOTEPROC)	+= ti_k3_m4_remoteproc.o
 obj-$(CONFIG_TI_K3_R5_REMOTEPROC)	+= ti_k3_r5_remoteproc.o
diff -urN linux-6.12-rc6/drivers/remoteproc/sun8i_rproc.c linux-6.12-rc6-wip/drivers/remoteproc/sun8i_rproc.c
--- linux-6.12-rc6/drivers/remoteproc/sun8i_rproc.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-6.12-rc6-wip/drivers/remoteproc/sun8i_rproc.c	2024-11-04 10:03:00.000000000 +0100
@@ -0,0 +1,468 @@
+// SPDX-License-Identifier: GPL-2.0
+//
+// Copyright (c) 2024 Andras Szemzo <szemzo.andras@gmail.com>
+
+#include <linux/interrupt.h>
+#include <linux/clk.h>
+#include <linux/io.h>
+#include <linux/mailbox_client.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_reserved_mem.h>
+#include <linux/platform_device.h>
+#include <linux/pm_wakeirq.h>
+#include <linux/regmap.h>
+#include <linux/remoteproc.h>
+#include <linux/reset.h>
+#include <linux/workqueue.h>
+
+#include "remoteproc_internal.h"
+
+#define MBOX_NB_VQ		2
+#define MBOX_NB_MBX		2
+
+#define SUN8I_MBX_VQ0		"rx"
+#define SUN8I_MBX_VQ0_ID	0
+#define SUN8I_MBX_VQ1		"tx"
+#define SUN8I_MBX_VQ1_ID	1
+
+#define RISC_STA_ADD_REG	0x0204
+#define RISC_CLK_FREQ		600000000
+
+struct sun8i_mbox {
+	const unsigned char name[10];
+	struct mbox_chan *chan;
+	struct mbox_client client;
+	struct work_struct vq_work;
+	int vq_id;
+};
+
+struct sun8i_rproc {
+	void __iomem *reg_base;
+	struct clk *clk;
+	struct clk *clk_cfg;
+	struct reset_control *sys_apb_reset;
+	struct reset_control *soft_reset;
+	struct reset_control *clk_gate_reset;
+	struct reset_control *cfg_reset;
+	struct sun8i_mbox mb[MBOX_NB_MBX];
+	struct workqueue_struct *workqueue;
+};
+
+static int sun8i_rproc_mem_alloc(struct rproc *rproc,
+				 struct rproc_mem_entry *mem)
+{
+	struct device *dev = &rproc->dev;
+	void *va;
+
+	dev_dbg(dev, "map memory: %pa+%zx\n", &mem->dma, mem->len);
+	va = ioremap_wc(mem->dma, mem->len);
+	if (!va) {
+		dev_err(dev, "Unable to map memory region: %pa+%zx\n",
+			&mem->dma, mem->len);
+		return -ENOMEM;
+	}
+
+	/* Update memory entry va */
+	mem->va = va;
+
+	return 0;
+}
+
+static int sun8i_rproc_mem_release(struct rproc *rproc,
+				   struct rproc_mem_entry *mem)
+{
+	dev_dbg(&rproc->dev, "unmap memory: %pa\n", &mem->dma);
+	iounmap(mem->va);
+
+	return 0;
+}
+
+static int sun8i_rproc_parse_fw(struct rproc *rproc, const struct firmware *fw)
+{
+	struct device *dev = rproc->dev.parent;
+	struct device_node *np = dev->of_node;
+	struct rproc_mem_entry *mem;
+	struct reserved_mem *rmem;
+	struct of_phandle_iterator it;
+	int index = 0;
+
+	of_phandle_iterator_init(&it, np, "memory-region", NULL, 0);
+	while (of_phandle_iterator_next(&it) == 0) {
+		rmem = of_reserved_mem_lookup(it.node);
+		if (!rmem) {
+			of_node_put(it.node);
+			dev_err(dev, "unable to acquire memory-region\n");
+			return -EINVAL;
+		}
+
+		/*  No need to map vdev buffer */
+		if (strcmp(it.node->name, "vdev0buffer")) {
+			/* Register memory region */
+			mem = rproc_mem_entry_init(dev, NULL,
+						   (dma_addr_t)rmem->base,
+						    rmem->size, rmem->base,
+						    sun8i_rproc_mem_alloc,
+						    sun8i_rproc_mem_release,
+						    it.node->name);
+		} else {
+			/* Register reserved memory for vdev buffer allocation */
+			mem = rproc_of_resm_mem_entry_init(dev, index,
+							   rmem->size,
+							   rmem->base,
+							   it.node->name);
+		}
+
+		if (!mem) {
+			of_node_put(it.node);
+			return -ENOMEM;
+		}
+
+		rproc_add_carveout(rproc, mem);
+		index++;
+	}
+
+	return rproc_elf_load_rsc_table(rproc, fw);
+}
+
+static void sun8i_rproc_mb_vq_work(struct work_struct *work)
+{
+	struct sun8i_mbox *mb = container_of(work, struct sun8i_mbox, vq_work);
+	struct rproc *rproc = dev_get_drvdata(mb->client.dev);
+
+	mutex_lock(&rproc->lock);
+
+	if (rproc->state != RPROC_RUNNING && rproc->state != RPROC_ATTACHED)
+		goto unlock_mutex;
+
+	if (rproc_vq_interrupt(rproc, mb->vq_id) == IRQ_NONE)
+		dev_dbg(&rproc->dev, "no message found in vq%d\n", mb->vq_id);
+
+unlock_mutex:
+	mutex_unlock(&rproc->lock);
+}
+
+static void sun8i_rproc_mb_callback(struct mbox_client *cl, void *data)
+{
+	struct rproc *rproc = dev_get_drvdata(cl->dev);
+	struct sun8i_mbox *mb = container_of(cl, struct sun8i_mbox, client);
+	struct sun8i_rproc *ddata = rproc->priv;
+
+	queue_work(ddata->workqueue, &mb->vq_work);
+}
+
+static void sun8i_rproc_free_mbox(struct rproc *rproc)
+{
+	struct sun8i_rproc *ddata = rproc->priv;
+	unsigned int i;
+
+	for (i = 0; i < ARRAY_SIZE(ddata->mb); i++) {
+		if (ddata->mb[i].chan)
+			mbox_free_channel(ddata->mb[i].chan);
+		ddata->mb[i].chan = NULL;
+	}
+}
+
+static const struct sun8i_mbox sun8i_rproc_mbox[MBOX_NB_MBX] = {
+	{
+		.name = SUN8I_MBX_VQ0,
+		.vq_id = SUN8I_MBX_VQ0_ID,
+		.client = {
+			.rx_callback = sun8i_rproc_mb_callback,
+			.tx_block = false,
+		},
+	},
+	{
+		.name = SUN8I_MBX_VQ1,
+		.vq_id = SUN8I_MBX_VQ1_ID,
+		.client = {
+			.rx_callback = sun8i_rproc_mb_callback,
+			.tx_block = false,
+		},
+	}
+};
+
+static int sun8i_rproc_request_mbox(struct rproc *rproc)
+{
+	struct sun8i_rproc *ddata = rproc->priv;
+	struct device *dev = &rproc->dev;
+	unsigned int i;
+	int j;
+	const unsigned char *name;
+	struct mbox_client *cl;
+
+	/* Initialise mailbox structure table */
+	memcpy(ddata->mb, sun8i_rproc_mbox, sizeof(sun8i_rproc_mbox));
+
+	for (i = 0; i < MBOX_NB_MBX; i++) {
+		name = ddata->mb[i].name;
+
+		cl = &ddata->mb[i].client;
+		cl->dev = dev->parent;
+
+		ddata->mb[i].chan = mbox_request_channel_byname(cl, name);
+		if (IS_ERR(ddata->mb[i].chan)) {
+			if (PTR_ERR(ddata->mb[i].chan) == -EPROBE_DEFER) {
+				dev_err_probe(dev->parent,
+					      PTR_ERR(ddata->mb[i].chan),
+					      "failed to request mailbox %s\n",
+					      name);
+				goto err_probe;
+			}
+			dev_warn(dev, "cannot get %s mbox\n", name);
+			ddata->mb[i].chan = NULL;
+		}
+		if (ddata->mb[i].vq_id >= 0) {
+			INIT_WORK(&ddata->mb[i].vq_work,
+				  sun8i_rproc_mb_vq_work);
+		}
+	}
+
+	return 0;
+
+err_probe:
+	for (j = i - 1; j >= 0; j--)
+		if (ddata->mb[j].chan)
+			mbox_free_channel(ddata->mb[j].chan);
+	return -EPROBE_DEFER;
+}
+
+static void sun8i_rproc_add_coredump_trace(struct rproc *rproc)
+{
+	struct rproc_debug_trace *trace;
+	struct rproc_dump_segment *segment;
+	bool already_added;
+
+	list_for_each_entry(trace, &rproc->traces, node) {
+		already_added = false;
+
+		list_for_each_entry(segment, &rproc->dump_segments, node) {
+			if (segment->da == trace->trace_mem.da) {
+				already_added = true;
+				break;
+			}
+		}
+
+		if (!already_added)
+			rproc_coredump_add_segment(rproc, trace->trace_mem.da,
+						   trace->trace_mem.len);
+	}
+}
+
+static int sun8i_rproc_start(struct rproc *rproc)
+{
+	struct sun8i_rproc *ddata = rproc->priv;
+
+	sun8i_rproc_add_coredump_trace(rproc);
+
+	reset_control_deassert(ddata->sys_apb_reset);
+
+	clk_prepare_enable(ddata->clk);
+	clk_prepare_enable(ddata->clk_cfg);
+
+	reset_control_deassert(ddata->cfg_reset);
+
+	writel(rproc->bootaddr, ddata->reg_base + RISC_STA_ADD_REG);
+
+	reset_control_deassert(ddata->soft_reset);
+	reset_control_deassert(ddata->clk_gate_reset);
+
+	return 0;
+}
+
+static int sun8i_rproc_stop(struct rproc *rproc)
+{
+	struct sun8i_rproc *ddata = rproc->priv;
+
+	clk_disable_unprepare(ddata->clk);
+	clk_disable_unprepare(ddata->clk_cfg);
+
+	reset_control_assert(ddata->clk_gate_reset);
+
+	reset_control_assert(ddata->soft_reset);
+	reset_control_assert(ddata->sys_apb_reset);
+
+	return 0;
+}
+
+static void sun8i_rproc_kick(struct rproc *rproc, int vqid)
+{
+	struct sun8i_rproc *ddata = rproc->priv;
+	unsigned int i;
+	int err;
+
+	if (WARN_ON(vqid >= MBOX_NB_VQ))
+		return;
+
+	for (i = 0; i < MBOX_NB_MBX; i++) {
+		if (vqid != ddata->mb[i].vq_id)
+			continue;
+		if (!ddata->mb[i].chan)
+			return;
+		err = mbox_send_message(ddata->mb[i].chan, "kick");
+		if (err < 0)
+			dev_err(&rproc->dev, "%s: failed (%s, err:%d)\n",
+				__func__, ddata->mb[i].name, err);
+		return;
+	}
+}
+
+static const struct rproc_ops sun8i_rproc_ops = {
+	.start		= sun8i_rproc_start,
+	.stop		= sun8i_rproc_stop,
+	.kick		= sun8i_rproc_kick,
+	.load		= rproc_elf_load_segments,
+	.parse_fw	= sun8i_rproc_parse_fw,
+	.find_loaded_rsc_table = rproc_elf_find_loaded_rsc_table,
+	.sanity_check	= rproc_elf_sanity_check,
+	.get_boot_addr	= rproc_elf_get_boot_addr,
+};
+
+static int sun8i_rproc_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct sun8i_rproc *ddata;
+	struct device_node *np = dev->of_node;
+	const char *firmware_name;
+	struct rproc *rproc;
+	u32 freq;
+	int ret;
+
+	firmware_name = NULL;
+	of_property_read_string(np, "firmware-name", &firmware_name);
+
+	rproc = devm_rproc_alloc(dev, np->name, &sun8i_rproc_ops, firmware_name, sizeof(*ddata));
+	if (!rproc)
+		return -ENOMEM;
+
+	ddata = rproc->priv;
+
+	ddata->reg_base = devm_platform_ioremap_resource(pdev, 0);
+	if (IS_ERR(ddata->reg_base))
+		return -EINVAL;
+
+	rproc->auto_boot = false;
+	rproc->has_iommu = false;
+
+	rproc_coredump_set_elf_info(rproc, ELFCLASS32, EM_NONE);
+
+	ddata->clk = devm_clk_get(dev, "riscv");
+	if (IS_ERR(ddata->clk))
+		return dev_err_probe(dev, PTR_ERR(ddata->clk),
+				     "Failed to get riscv clock\n");
+
+	ddata->clk_cfg = devm_clk_get(dev, "cfg");
+	if (IS_ERR(ddata->clk_cfg))
+		return dev_err_probe(dev, PTR_ERR(ddata->clk_cfg),
+				     "Failed to get clk_cfg clock\n");
+
+	freq = RISC_CLK_FREQ;
+	of_property_read_u32(np, "clock-frequency", &freq);
+	ret = clk_set_rate(ddata->clk, freq);
+	if (ret)
+		return dev_err_probe(dev, ret,
+				     "Failed to set clock frequency\n");
+
+	ddata->sys_apb_reset = devm_reset_control_get_exclusive(dev, "sys_apb");
+	if (IS_ERR(ddata->sys_apb_reset))
+		return dev_err_probe(dev, PTR_ERR(ddata->sys_apb_reset),
+				     "Failed to get sys_apb reset\n");
+
+
+	ddata->soft_reset = devm_reset_control_get_exclusive(dev, "soft");
+	if (IS_ERR(ddata->soft_reset))
+		return dev_err_probe(dev, PTR_ERR(ddata->soft_reset),
+				     "Failed to get soft reset\n");
+
+	ddata->clk_gate_reset = devm_reset_control_get_exclusive(dev, "clk_gate");
+	if (IS_ERR(ddata->clk_gate_reset))
+		return dev_err_probe(dev, PTR_ERR(ddata->clk_gate_reset),
+				     "Failed to get clk_gate reset\n");
+
+	ddata->cfg_reset = devm_reset_control_get_exclusive(dev, "cfg");
+	if (IS_ERR(ddata->cfg_reset))
+		return dev_err_probe(dev, PTR_ERR(ddata->cfg_reset),
+				     "Failed to get cfg reset\n");
+
+	ddata->workqueue = create_workqueue(dev_name(dev));
+	if (!ddata->workqueue) {
+		dev_err(dev, "cannot create workqueue\n");
+		ret = -ENOMEM;
+		goto free_resources;
+	}
+
+	platform_set_drvdata(pdev, rproc);
+
+	ret = sun8i_rproc_request_mbox(rproc);
+	if (ret)
+		goto free_wkq;
+
+	ret = rproc_add(rproc);
+	if (ret)
+		goto free_mb;
+
+	return 0;
+
+free_mb:
+	sun8i_rproc_free_mbox(rproc);
+free_wkq:
+	destroy_workqueue(ddata->workqueue);
+free_resources:
+	rproc_resource_cleanup(rproc);
+
+	return ret;
+}
+
+static void sun8i_rproc_remove(struct platform_device *pdev)
+{
+	struct rproc *rproc = platform_get_drvdata(pdev);
+	struct sun8i_rproc *ddata = rproc->priv;
+
+	if (atomic_read(&rproc->power) > 0)
+		rproc_shutdown(rproc);
+
+	rproc_del(rproc);
+	sun8i_rproc_free_mbox(rproc);
+	destroy_workqueue(ddata->workqueue);
+}
+
+static int sun8i_rproc_suspend(struct device *dev)
+{
+//	struct rproc *rproc = dev_get_drvdata(dev);
+//	struct sun8i_rproc *ddata = rproc->priv;
+
+	return 0;
+}
+
+static int sun8i_rproc_resume(struct device *dev)
+{
+//	struct rproc *rproc = dev_get_drvdata(dev);
+//	struct sun8i_rproc *ddata = rproc->priv;
+
+	return 0;
+}
+
+static DEFINE_SIMPLE_DEV_PM_OPS(sun8i_rproc_pm_ops,
+				sun8i_rproc_suspend, sun8i_rproc_resume);
+
+
+static const struct of_device_id sun8i_rproc_match[] = {
+	{ .compatible = "allwinner,sun8i-v853-rproc" },
+	{},
+};
+MODULE_DEVICE_TABLE(of, sun8i_rproc_match);
+
+static struct platform_driver sun8i_rproc_driver = {
+	.probe = sun8i_rproc_probe,
+	.remove_new = sun8i_rproc_remove,
+	.driver = {
+		.name = "sun8i-rproc",
+		.pm = pm_ptr(&sun8i_rproc_pm_ops),
+		.of_match_table = sun8i_rproc_match,
+	},
+};
+module_platform_driver(sun8i_rproc_driver);
+
+MODULE_AUTHOR("Andras Szemzo <szemzo.andras@gmail.com>");
+MODULE_DESCRIPTION("Allwinner sun8i remoteproc driver");
+MODULE_LICENSE("GPL");
